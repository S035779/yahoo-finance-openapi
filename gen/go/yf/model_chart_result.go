/*
 * Yahoo Finance
 *
 * Yahoo Finance API specification
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yf

import (
	"encoding/json"
)

// ChartResult struct for ChartResult
type ChartResult struct {
	Meta *ChartMeta `json:"meta,omitempty"`
	Timestamp *[]int32 `json:"timestamp,omitempty"`
	Indicators *ChartIndicators `json:"indicators,omitempty"`
}

// NewChartResult instantiates a new ChartResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartResult() *ChartResult {
	this := ChartResult{}
	return &this
}

// NewChartResultWithDefaults instantiates a new ChartResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartResultWithDefaults() *ChartResult {
	this := ChartResult{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ChartResult) GetMeta() ChartMeta {
	if o == nil || o.Meta == nil {
		var ret ChartMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartResult) GetMetaOk() (*ChartMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ChartResult) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ChartMeta and assigns it to the Meta field.
func (o *ChartResult) SetMeta(v ChartMeta) {
	o.Meta = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ChartResult) GetTimestamp() []int32 {
	if o == nil || o.Timestamp == nil {
		var ret []int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartResult) GetTimestampOk() (*[]int32, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ChartResult) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given []int32 and assigns it to the Timestamp field.
func (o *ChartResult) SetTimestamp(v []int32) {
	o.Timestamp = &v
}

// GetIndicators returns the Indicators field value if set, zero value otherwise.
func (o *ChartResult) GetIndicators() ChartIndicators {
	if o == nil || o.Indicators == nil {
		var ret ChartIndicators
		return ret
	}
	return *o.Indicators
}

// GetIndicatorsOk returns a tuple with the Indicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartResult) GetIndicatorsOk() (*ChartIndicators, bool) {
	if o == nil || o.Indicators == nil {
		return nil, false
	}
	return o.Indicators, true
}

// HasIndicators returns a boolean if a field has been set.
func (o *ChartResult) HasIndicators() bool {
	if o != nil && o.Indicators != nil {
		return true
	}

	return false
}

// SetIndicators gets a reference to the given ChartIndicators and assigns it to the Indicators field.
func (o *ChartResult) SetIndicators(v ChartIndicators) {
	o.Indicators = &v
}

func (o ChartResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Indicators != nil {
		toSerialize["indicators"] = o.Indicators
	}
	return json.Marshal(toSerialize)
}

type NullableChartResult struct {
	value *ChartResult
	isSet bool
}

func (v NullableChartResult) Get() *ChartResult {
	return v.value
}

func (v *NullableChartResult) Set(val *ChartResult) {
	v.value = val
	v.isSet = true
}

func (v NullableChartResult) IsSet() bool {
	return v.isSet
}

func (v *NullableChartResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartResult(val *ChartResult) *NullableChartResult {
	return &NullableChartResult{value: val, isSet: true}
}

func (v NullableChartResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


