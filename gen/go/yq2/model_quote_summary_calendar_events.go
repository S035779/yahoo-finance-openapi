/*
 * Yahoo Finance
 *
 * Yahoo Finance API specification
 *
 * API version: 1.0.8
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yq2

import (
	"encoding/json"
)

// QuoteSummaryCalendarEvents struct for QuoteSummaryCalendarEvents
type QuoteSummaryCalendarEvents struct {
	MaxAge *int32 `json:"maxAge,omitempty"`
	Earnings *QuoteSummaryCalendarEventsEarnings `json:"earnings,omitempty"`
	ExDividendDate *string `json:"exDividendDate,omitempty"`
	DividendDate *string `json:"dividendDate,omitempty"`
}

// NewQuoteSummaryCalendarEvents instantiates a new QuoteSummaryCalendarEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteSummaryCalendarEvents() *QuoteSummaryCalendarEvents {
	this := QuoteSummaryCalendarEvents{}
	return &this
}

// NewQuoteSummaryCalendarEventsWithDefaults instantiates a new QuoteSummaryCalendarEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteSummaryCalendarEventsWithDefaults() *QuoteSummaryCalendarEvents {
	this := QuoteSummaryCalendarEvents{}
	return &this
}

// GetMaxAge returns the MaxAge field value if set, zero value otherwise.
func (o *QuoteSummaryCalendarEvents) GetMaxAge() int32 {
	if o == nil || o.MaxAge == nil {
		var ret int32
		return ret
	}
	return *o.MaxAge
}

// GetMaxAgeOk returns a tuple with the MaxAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteSummaryCalendarEvents) GetMaxAgeOk() (*int32, bool) {
	if o == nil || o.MaxAge == nil {
		return nil, false
	}
	return o.MaxAge, true
}

// HasMaxAge returns a boolean if a field has been set.
func (o *QuoteSummaryCalendarEvents) HasMaxAge() bool {
	if o != nil && o.MaxAge != nil {
		return true
	}

	return false
}

// SetMaxAge gets a reference to the given int32 and assigns it to the MaxAge field.
func (o *QuoteSummaryCalendarEvents) SetMaxAge(v int32) {
	o.MaxAge = &v
}

// GetEarnings returns the Earnings field value if set, zero value otherwise.
func (o *QuoteSummaryCalendarEvents) GetEarnings() QuoteSummaryCalendarEventsEarnings {
	if o == nil || o.Earnings == nil {
		var ret QuoteSummaryCalendarEventsEarnings
		return ret
	}
	return *o.Earnings
}

// GetEarningsOk returns a tuple with the Earnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteSummaryCalendarEvents) GetEarningsOk() (*QuoteSummaryCalendarEventsEarnings, bool) {
	if o == nil || o.Earnings == nil {
		return nil, false
	}
	return o.Earnings, true
}

// HasEarnings returns a boolean if a field has been set.
func (o *QuoteSummaryCalendarEvents) HasEarnings() bool {
	if o != nil && o.Earnings != nil {
		return true
	}

	return false
}

// SetEarnings gets a reference to the given QuoteSummaryCalendarEventsEarnings and assigns it to the Earnings field.
func (o *QuoteSummaryCalendarEvents) SetEarnings(v QuoteSummaryCalendarEventsEarnings) {
	o.Earnings = &v
}

// GetExDividendDate returns the ExDividendDate field value if set, zero value otherwise.
func (o *QuoteSummaryCalendarEvents) GetExDividendDate() string {
	if o == nil || o.ExDividendDate == nil {
		var ret string
		return ret
	}
	return *o.ExDividendDate
}

// GetExDividendDateOk returns a tuple with the ExDividendDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteSummaryCalendarEvents) GetExDividendDateOk() (*string, bool) {
	if o == nil || o.ExDividendDate == nil {
		return nil, false
	}
	return o.ExDividendDate, true
}

// HasExDividendDate returns a boolean if a field has been set.
func (o *QuoteSummaryCalendarEvents) HasExDividendDate() bool {
	if o != nil && o.ExDividendDate != nil {
		return true
	}

	return false
}

// SetExDividendDate gets a reference to the given string and assigns it to the ExDividendDate field.
func (o *QuoteSummaryCalendarEvents) SetExDividendDate(v string) {
	o.ExDividendDate = &v
}

// GetDividendDate returns the DividendDate field value if set, zero value otherwise.
func (o *QuoteSummaryCalendarEvents) GetDividendDate() string {
	if o == nil || o.DividendDate == nil {
		var ret string
		return ret
	}
	return *o.DividendDate
}

// GetDividendDateOk returns a tuple with the DividendDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteSummaryCalendarEvents) GetDividendDateOk() (*string, bool) {
	if o == nil || o.DividendDate == nil {
		return nil, false
	}
	return o.DividendDate, true
}

// HasDividendDate returns a boolean if a field has been set.
func (o *QuoteSummaryCalendarEvents) HasDividendDate() bool {
	if o != nil && o.DividendDate != nil {
		return true
	}

	return false
}

// SetDividendDate gets a reference to the given string and assigns it to the DividendDate field.
func (o *QuoteSummaryCalendarEvents) SetDividendDate(v string) {
	o.DividendDate = &v
}

func (o QuoteSummaryCalendarEvents) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxAge != nil {
		toSerialize["maxAge"] = o.MaxAge
	}
	if o.Earnings != nil {
		toSerialize["earnings"] = o.Earnings
	}
	if o.ExDividendDate != nil {
		toSerialize["exDividendDate"] = o.ExDividendDate
	}
	if o.DividendDate != nil {
		toSerialize["dividendDate"] = o.DividendDate
	}
	return json.Marshal(toSerialize)
}

type NullableQuoteSummaryCalendarEvents struct {
	value *QuoteSummaryCalendarEvents
	isSet bool
}

func (v NullableQuoteSummaryCalendarEvents) Get() *QuoteSummaryCalendarEvents {
	return v.value
}

func (v *NullableQuoteSummaryCalendarEvents) Set(val *QuoteSummaryCalendarEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteSummaryCalendarEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteSummaryCalendarEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteSummaryCalendarEvents(val *QuoteSummaryCalendarEvents) *NullableQuoteSummaryCalendarEvents {
	return &NullableQuoteSummaryCalendarEvents{value: val, isSet: true}
}

func (v NullableQuoteSummaryCalendarEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteSummaryCalendarEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


