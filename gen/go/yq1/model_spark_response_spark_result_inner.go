/*
Yahoo Finance

Yahoo Finance API specification

API version: 1.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yq1

import (
	"encoding/json"
)

// checks if the SparkResponseSparkResultInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SparkResponseSparkResultInner{}

// SparkResponseSparkResultInner struct for SparkResponseSparkResultInner
type SparkResponseSparkResultInner struct {
	Symbol *string `json:"symbol,omitempty"`
	Response []SparkResponseSparkResultInnerResponseInner `json:"response,omitempty"`
}

// NewSparkResponseSparkResultInner instantiates a new SparkResponseSparkResultInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSparkResponseSparkResultInner() *SparkResponseSparkResultInner {
	this := SparkResponseSparkResultInner{}
	return &this
}

// NewSparkResponseSparkResultInnerWithDefaults instantiates a new SparkResponseSparkResultInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSparkResponseSparkResultInnerWithDefaults() *SparkResponseSparkResultInner {
	this := SparkResponseSparkResultInner{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInner) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInner) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInner) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *SparkResponseSparkResultInner) SetSymbol(v string) {
	o.Symbol = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInner) GetResponse() []SparkResponseSparkResultInnerResponseInner {
	if o == nil || IsNil(o.Response) {
		var ret []SparkResponseSparkResultInnerResponseInner
		return ret
	}
	return o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInner) GetResponseOk() ([]SparkResponseSparkResultInnerResponseInner, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInner) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given []SparkResponseSparkResultInnerResponseInner and assigns it to the Response field.
func (o *SparkResponseSparkResultInner) SetResponse(v []SparkResponseSparkResultInnerResponseInner) {
	o.Response = v
}

func (o SparkResponseSparkResultInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SparkResponseSparkResultInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	return toSerialize, nil
}

type NullableSparkResponseSparkResultInner struct {
	value *SparkResponseSparkResultInner
	isSet bool
}

func (v NullableSparkResponseSparkResultInner) Get() *SparkResponseSparkResultInner {
	return v.value
}

func (v *NullableSparkResponseSparkResultInner) Set(val *SparkResponseSparkResultInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSparkResponseSparkResultInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSparkResponseSparkResultInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSparkResponseSparkResultInner(val *SparkResponseSparkResultInner) *NullableSparkResponseSparkResultInner {
	return &NullableSparkResponseSparkResultInner{value: val, isSet: true}
}

func (v NullableSparkResponseSparkResultInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSparkResponseSparkResultInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


