/*
Yahoo Finance

Yahoo Finance API specification

API version: 1.0.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package yq1

import (
	"encoding/json"
)

// checks if the SparkResponseSparkResultInnerResponseInnerMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SparkResponseSparkResultInnerResponseInnerMeta{}

// SparkResponseSparkResultInnerResponseInnerMeta struct for SparkResponseSparkResultInnerResponseInnerMeta
type SparkResponseSparkResultInnerResponseInnerMeta struct {
	Currency *string `json:"currency,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	ExchangeName *string `json:"exchangeName,omitempty"`
	InstrumentType *string `json:"instrumentType,omitempty"`
	FirstTradeDate *int32 `json:"firstTradeDate,omitempty"`
	RegularMarketTime *int32 `json:"regularMarketTime,omitempty"`
	Gmtoffset *int32 `json:"gmtoffset,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	ExchangeTimezoneName *string `json:"exchangeTimezoneName,omitempty"`
	RegularMarketPrice *float32 `json:"regularMarketPrice,omitempty"`
	ChartPreviousClose *float32 `json:"chartPreviousClose,omitempty"`
	PreviousClose *float32 `json:"previousClose,omitempty"`
	Scale *int32 `json:"scale,omitempty"`
	PriceHint *int32 `json:"priceHint,omitempty"`
	CurrentTradingPeriod *SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriod `json:"currentTradingPeriod,omitempty"`
	TradingPeriods [][]SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriodPre `json:"tradingPeriods,omitempty"`
	DataGranularity *string `json:"dataGranularity,omitempty"`
	Range *string `json:"range,omitempty"`
	ValidRanges []string `json:"validRanges,omitempty"`
}

// NewSparkResponseSparkResultInnerResponseInnerMeta instantiates a new SparkResponseSparkResultInnerResponseInnerMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSparkResponseSparkResultInnerResponseInnerMeta() *SparkResponseSparkResultInnerResponseInnerMeta {
	this := SparkResponseSparkResultInnerResponseInnerMeta{}
	return &this
}

// NewSparkResponseSparkResultInnerResponseInnerMetaWithDefaults instantiates a new SparkResponseSparkResultInnerResponseInnerMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSparkResponseSparkResultInnerResponseInnerMetaWithDefaults() *SparkResponseSparkResultInnerResponseInnerMeta {
	this := SparkResponseSparkResultInnerResponseInnerMeta{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetCurrency(v string) {
	o.Currency = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetSymbol(v string) {
	o.Symbol = &v
}

// GetExchangeName returns the ExchangeName field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetExchangeName() string {
	if o == nil || IsNil(o.ExchangeName) {
		var ret string
		return ret
	}
	return *o.ExchangeName
}

// GetExchangeNameOk returns a tuple with the ExchangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetExchangeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeName) {
		return nil, false
	}
	return o.ExchangeName, true
}

// HasExchangeName returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasExchangeName() bool {
	if o != nil && !IsNil(o.ExchangeName) {
		return true
	}

	return false
}

// SetExchangeName gets a reference to the given string and assigns it to the ExchangeName field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetExchangeName(v string) {
	o.ExchangeName = &v
}

// GetInstrumentType returns the InstrumentType field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetInstrumentType() string {
	if o == nil || IsNil(o.InstrumentType) {
		var ret string
		return ret
	}
	return *o.InstrumentType
}

// GetInstrumentTypeOk returns a tuple with the InstrumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetInstrumentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstrumentType) {
		return nil, false
	}
	return o.InstrumentType, true
}

// HasInstrumentType returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasInstrumentType() bool {
	if o != nil && !IsNil(o.InstrumentType) {
		return true
	}

	return false
}

// SetInstrumentType gets a reference to the given string and assigns it to the InstrumentType field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetInstrumentType(v string) {
	o.InstrumentType = &v
}

// GetFirstTradeDate returns the FirstTradeDate field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetFirstTradeDate() int32 {
	if o == nil || IsNil(o.FirstTradeDate) {
		var ret int32
		return ret
	}
	return *o.FirstTradeDate
}

// GetFirstTradeDateOk returns a tuple with the FirstTradeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetFirstTradeDateOk() (*int32, bool) {
	if o == nil || IsNil(o.FirstTradeDate) {
		return nil, false
	}
	return o.FirstTradeDate, true
}

// HasFirstTradeDate returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasFirstTradeDate() bool {
	if o != nil && !IsNil(o.FirstTradeDate) {
		return true
	}

	return false
}

// SetFirstTradeDate gets a reference to the given int32 and assigns it to the FirstTradeDate field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetFirstTradeDate(v int32) {
	o.FirstTradeDate = &v
}

// GetRegularMarketTime returns the RegularMarketTime field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetRegularMarketTime() int32 {
	if o == nil || IsNil(o.RegularMarketTime) {
		var ret int32
		return ret
	}
	return *o.RegularMarketTime
}

// GetRegularMarketTimeOk returns a tuple with the RegularMarketTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetRegularMarketTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.RegularMarketTime) {
		return nil, false
	}
	return o.RegularMarketTime, true
}

// HasRegularMarketTime returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasRegularMarketTime() bool {
	if o != nil && !IsNil(o.RegularMarketTime) {
		return true
	}

	return false
}

// SetRegularMarketTime gets a reference to the given int32 and assigns it to the RegularMarketTime field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetRegularMarketTime(v int32) {
	o.RegularMarketTime = &v
}

// GetGmtoffset returns the Gmtoffset field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetGmtoffset() int32 {
	if o == nil || IsNil(o.Gmtoffset) {
		var ret int32
		return ret
	}
	return *o.Gmtoffset
}

// GetGmtoffsetOk returns a tuple with the Gmtoffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetGmtoffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Gmtoffset) {
		return nil, false
	}
	return o.Gmtoffset, true
}

// HasGmtoffset returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasGmtoffset() bool {
	if o != nil && !IsNil(o.Gmtoffset) {
		return true
	}

	return false
}

// SetGmtoffset gets a reference to the given int32 and assigns it to the Gmtoffset field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetGmtoffset(v int32) {
	o.Gmtoffset = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetTimezone(v string) {
	o.Timezone = &v
}

// GetExchangeTimezoneName returns the ExchangeTimezoneName field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetExchangeTimezoneName() string {
	if o == nil || IsNil(o.ExchangeTimezoneName) {
		var ret string
		return ret
	}
	return *o.ExchangeTimezoneName
}

// GetExchangeTimezoneNameOk returns a tuple with the ExchangeTimezoneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetExchangeTimezoneNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeTimezoneName) {
		return nil, false
	}
	return o.ExchangeTimezoneName, true
}

// HasExchangeTimezoneName returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasExchangeTimezoneName() bool {
	if o != nil && !IsNil(o.ExchangeTimezoneName) {
		return true
	}

	return false
}

// SetExchangeTimezoneName gets a reference to the given string and assigns it to the ExchangeTimezoneName field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetExchangeTimezoneName(v string) {
	o.ExchangeTimezoneName = &v
}

// GetRegularMarketPrice returns the RegularMarketPrice field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetRegularMarketPrice() float32 {
	if o == nil || IsNil(o.RegularMarketPrice) {
		var ret float32
		return ret
	}
	return *o.RegularMarketPrice
}

// GetRegularMarketPriceOk returns a tuple with the RegularMarketPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetRegularMarketPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.RegularMarketPrice) {
		return nil, false
	}
	return o.RegularMarketPrice, true
}

// HasRegularMarketPrice returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasRegularMarketPrice() bool {
	if o != nil && !IsNil(o.RegularMarketPrice) {
		return true
	}

	return false
}

// SetRegularMarketPrice gets a reference to the given float32 and assigns it to the RegularMarketPrice field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetRegularMarketPrice(v float32) {
	o.RegularMarketPrice = &v
}

// GetChartPreviousClose returns the ChartPreviousClose field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetChartPreviousClose() float32 {
	if o == nil || IsNil(o.ChartPreviousClose) {
		var ret float32
		return ret
	}
	return *o.ChartPreviousClose
}

// GetChartPreviousCloseOk returns a tuple with the ChartPreviousClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetChartPreviousCloseOk() (*float32, bool) {
	if o == nil || IsNil(o.ChartPreviousClose) {
		return nil, false
	}
	return o.ChartPreviousClose, true
}

// HasChartPreviousClose returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasChartPreviousClose() bool {
	if o != nil && !IsNil(o.ChartPreviousClose) {
		return true
	}

	return false
}

// SetChartPreviousClose gets a reference to the given float32 and assigns it to the ChartPreviousClose field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetChartPreviousClose(v float32) {
	o.ChartPreviousClose = &v
}

// GetPreviousClose returns the PreviousClose field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetPreviousClose() float32 {
	if o == nil || IsNil(o.PreviousClose) {
		var ret float32
		return ret
	}
	return *o.PreviousClose
}

// GetPreviousCloseOk returns a tuple with the PreviousClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetPreviousCloseOk() (*float32, bool) {
	if o == nil || IsNil(o.PreviousClose) {
		return nil, false
	}
	return o.PreviousClose, true
}

// HasPreviousClose returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasPreviousClose() bool {
	if o != nil && !IsNil(o.PreviousClose) {
		return true
	}

	return false
}

// SetPreviousClose gets a reference to the given float32 and assigns it to the PreviousClose field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetPreviousClose(v float32) {
	o.PreviousClose = &v
}

// GetScale returns the Scale field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetScale() int32 {
	if o == nil || IsNil(o.Scale) {
		var ret int32
		return ret
	}
	return *o.Scale
}

// GetScaleOk returns a tuple with the Scale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetScaleOk() (*int32, bool) {
	if o == nil || IsNil(o.Scale) {
		return nil, false
	}
	return o.Scale, true
}

// HasScale returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasScale() bool {
	if o != nil && !IsNil(o.Scale) {
		return true
	}

	return false
}

// SetScale gets a reference to the given int32 and assigns it to the Scale field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetScale(v int32) {
	o.Scale = &v
}

// GetPriceHint returns the PriceHint field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetPriceHint() int32 {
	if o == nil || IsNil(o.PriceHint) {
		var ret int32
		return ret
	}
	return *o.PriceHint
}

// GetPriceHintOk returns a tuple with the PriceHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetPriceHintOk() (*int32, bool) {
	if o == nil || IsNil(o.PriceHint) {
		return nil, false
	}
	return o.PriceHint, true
}

// HasPriceHint returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasPriceHint() bool {
	if o != nil && !IsNil(o.PriceHint) {
		return true
	}

	return false
}

// SetPriceHint gets a reference to the given int32 and assigns it to the PriceHint field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetPriceHint(v int32) {
	o.PriceHint = &v
}

// GetCurrentTradingPeriod returns the CurrentTradingPeriod field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetCurrentTradingPeriod() SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriod {
	if o == nil || IsNil(o.CurrentTradingPeriod) {
		var ret SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriod
		return ret
	}
	return *o.CurrentTradingPeriod
}

// GetCurrentTradingPeriodOk returns a tuple with the CurrentTradingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetCurrentTradingPeriodOk() (*SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriod, bool) {
	if o == nil || IsNil(o.CurrentTradingPeriod) {
		return nil, false
	}
	return o.CurrentTradingPeriod, true
}

// HasCurrentTradingPeriod returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasCurrentTradingPeriod() bool {
	if o != nil && !IsNil(o.CurrentTradingPeriod) {
		return true
	}

	return false
}

// SetCurrentTradingPeriod gets a reference to the given SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriod and assigns it to the CurrentTradingPeriod field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetCurrentTradingPeriod(v SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriod) {
	o.CurrentTradingPeriod = &v
}

// GetTradingPeriods returns the TradingPeriods field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetTradingPeriods() [][]SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriodPre {
	if o == nil || IsNil(o.TradingPeriods) {
		var ret [][]SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriodPre
		return ret
	}
	return o.TradingPeriods
}

// GetTradingPeriodsOk returns a tuple with the TradingPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetTradingPeriodsOk() ([][]SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriodPre, bool) {
	if o == nil || IsNil(o.TradingPeriods) {
		return nil, false
	}
	return o.TradingPeriods, true
}

// HasTradingPeriods returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasTradingPeriods() bool {
	if o != nil && !IsNil(o.TradingPeriods) {
		return true
	}

	return false
}

// SetTradingPeriods gets a reference to the given [][]SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriodPre and assigns it to the TradingPeriods field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetTradingPeriods(v [][]SparkResponseSparkResultInnerResponseInnerMetaCurrentTradingPeriodPre) {
	o.TradingPeriods = v
}

// GetDataGranularity returns the DataGranularity field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetDataGranularity() string {
	if o == nil || IsNil(o.DataGranularity) {
		var ret string
		return ret
	}
	return *o.DataGranularity
}

// GetDataGranularityOk returns a tuple with the DataGranularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetDataGranularityOk() (*string, bool) {
	if o == nil || IsNil(o.DataGranularity) {
		return nil, false
	}
	return o.DataGranularity, true
}

// HasDataGranularity returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasDataGranularity() bool {
	if o != nil && !IsNil(o.DataGranularity) {
		return true
	}

	return false
}

// SetDataGranularity gets a reference to the given string and assigns it to the DataGranularity field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetDataGranularity(v string) {
	o.DataGranularity = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetRange() string {
	if o == nil || IsNil(o.Range) {
		var ret string
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetRangeOk() (*string, bool) {
	if o == nil || IsNil(o.Range) {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given string and assigns it to the Range field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetRange(v string) {
	o.Range = &v
}

// GetValidRanges returns the ValidRanges field value if set, zero value otherwise.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetValidRanges() []string {
	if o == nil || IsNil(o.ValidRanges) {
		var ret []string
		return ret
	}
	return o.ValidRanges
}

// GetValidRangesOk returns a tuple with the ValidRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) GetValidRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.ValidRanges) {
		return nil, false
	}
	return o.ValidRanges, true
}

// HasValidRanges returns a boolean if a field has been set.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) HasValidRanges() bool {
	if o != nil && !IsNil(o.ValidRanges) {
		return true
	}

	return false
}

// SetValidRanges gets a reference to the given []string and assigns it to the ValidRanges field.
func (o *SparkResponseSparkResultInnerResponseInnerMeta) SetValidRanges(v []string) {
	o.ValidRanges = v
}

func (o SparkResponseSparkResultInnerResponseInnerMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SparkResponseSparkResultInnerResponseInnerMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.ExchangeName) {
		toSerialize["exchangeName"] = o.ExchangeName
	}
	if !IsNil(o.InstrumentType) {
		toSerialize["instrumentType"] = o.InstrumentType
	}
	if !IsNil(o.FirstTradeDate) {
		toSerialize["firstTradeDate"] = o.FirstTradeDate
	}
	if !IsNil(o.RegularMarketTime) {
		toSerialize["regularMarketTime"] = o.RegularMarketTime
	}
	if !IsNil(o.Gmtoffset) {
		toSerialize["gmtoffset"] = o.Gmtoffset
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.ExchangeTimezoneName) {
		toSerialize["exchangeTimezoneName"] = o.ExchangeTimezoneName
	}
	if !IsNil(o.RegularMarketPrice) {
		toSerialize["regularMarketPrice"] = o.RegularMarketPrice
	}
	if !IsNil(o.ChartPreviousClose) {
		toSerialize["chartPreviousClose"] = o.ChartPreviousClose
	}
	if !IsNil(o.PreviousClose) {
		toSerialize["previousClose"] = o.PreviousClose
	}
	if !IsNil(o.Scale) {
		toSerialize["scale"] = o.Scale
	}
	if !IsNil(o.PriceHint) {
		toSerialize["priceHint"] = o.PriceHint
	}
	if !IsNil(o.CurrentTradingPeriod) {
		toSerialize["currentTradingPeriod"] = o.CurrentTradingPeriod
	}
	if !IsNil(o.TradingPeriods) {
		toSerialize["tradingPeriods"] = o.TradingPeriods
	}
	if !IsNil(o.DataGranularity) {
		toSerialize["dataGranularity"] = o.DataGranularity
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if !IsNil(o.ValidRanges) {
		toSerialize["validRanges"] = o.ValidRanges
	}
	return toSerialize, nil
}

type NullableSparkResponseSparkResultInnerResponseInnerMeta struct {
	value *SparkResponseSparkResultInnerResponseInnerMeta
	isSet bool
}

func (v NullableSparkResponseSparkResultInnerResponseInnerMeta) Get() *SparkResponseSparkResultInnerResponseInnerMeta {
	return v.value
}

func (v *NullableSparkResponseSparkResultInnerResponseInnerMeta) Set(val *SparkResponseSparkResultInnerResponseInnerMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableSparkResponseSparkResultInnerResponseInnerMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableSparkResponseSparkResultInnerResponseInnerMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSparkResponseSparkResultInnerResponseInnerMeta(val *SparkResponseSparkResultInnerResponseInnerMeta) *NullableSparkResponseSparkResultInnerResponseInnerMeta {
	return &NullableSparkResponseSparkResultInnerResponseInnerMeta{value: val, isSet: true}
}

func (v NullableSparkResponseSparkResultInnerResponseInnerMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSparkResponseSparkResultInnerResponseInnerMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


